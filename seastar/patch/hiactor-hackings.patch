From 3c143f926a5493148ce8b6d0b73f29860c773b77 Mon Sep 17 00:00:00 2001
From: goldenleaves <houbai.zzc@alibaba-inc.com>
Date: Wed, 29 Jun 2022 08:41:35 +0000
Subject: [PATCH] hiactor hackings

---
 cooking.sh                         |  2 +-
 cooking_recipe.cmake               |  8 ++++----
 include/seastar/core/future.hh     |  4 +++-
 include/seastar/core/task.hh       | 26 +++++++++++++++++++++++++-
 include/seastar/net/api.hh         | 21 +++++++++++++++++++++
 include/seastar/net/posix-stack.hh | 12 ++++++++++++
 src/core/reactor.cc                | 23 +++++++++++++++++++----
 src/http/httpd.cc                  |  1 +
 src/net/posix-stack.cc             |  6 ++++++
 9 files changed, 92 insertions(+), 11 deletions(-)

diff --git a/cooking.sh b/cooking.sh
index eb028c09..bb311faf 100755
--- a/cooking.sh
+++ b/cooking.sh
@@ -931,7 +931,7 @@ if [ -n "${recipe}" ]; then
     # Configure the project, expecting all requirements satisfied.
     #

-    ${CMAKE} -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON "${@}" .
+    # ${CMAKE} -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON "${@}" .

     #
     # Optionally export the installed files.
diff --git a/cooking_recipe.cmake b/cooking_recipe.cmake
index 288ac901..a2418daf 100644
--- a/cooking_recipe.cmake
+++ b/cooking_recipe.cmake
@@ -121,8 +121,8 @@ cooking_ingredient (numactl

 cooking_ingredient (zlib
   EXTERNAL_PROJECT_ARGS
-    URL https://zlib.net/zlib-1.2.11.tar.gz
-    URL_MD5 1c9f62f0778697a09d36121ead88e08e
+    URL https://zlib.net/zlib-1.2.13.tar.gz
+    URL_MD5 9b8aa094c4e5765dabf4da391f00d15c
     CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR>
     BUILD_COMMAND <DISABLE>
     INSTALL_COMMAND ${make_command} install)
@@ -220,8 +220,8 @@ cooking_ingredient (yaml-cpp
     -DYAML_CPP_BUILD_TESTS=OFF
     -DBUILD_SHARED_LIBS=ON
   EXTERNAL_PROJECT_ARGS
-    URL https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.5.3.tar.gz
-    URL_MD5 2bba14e6a7f12c7272f87d044e4a7211)
+    URL https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.3.tar.gz
+    URL_MD5 b45bf1089a382e81f6b661062c10d0c2)

 ##
 ## Public dependencies.
diff --git a/include/seastar/core/future.hh b/include/seastar/core/future.hh
index 81ee1852..d26e043d 100644
--- a/include/seastar/core/future.hh
+++ b/include/seastar/core/future.hh
@@ -701,7 +701,9 @@ class continuation_base : public task {
     using future_type = future<T SEASTAR_ELLIPSIS>;
     using promise_type = promise<T SEASTAR_ELLIPSIS>;
 public:
-    continuation_base() noexcept = default;
+    /// hiactor hacking
+    /// fix building error in low version gcc
+    continuation_base() = default;
     void set_state(future_state&& state) noexcept {
         _state = std::move(state);
     }
diff --git a/include/seastar/core/task.hh b/include/seastar/core/task.hh
index 37ca56b9..7d3a7c87 100644
--- a/include/seastar/core/task.hh
+++ b/include/seastar/core/task.hh
@@ -27,6 +27,26 @@

 namespace seastar {

+/// hiactor hacking
+
+class task;
+
+class execution_context {
+public:
+    virtual void add_task(task* t) = 0;
+    virtual void add_urgent_task(task* t) = 0;
+};
+
+extern __thread execution_context* local_ec;
+
+inline void set_local_ec(execution_context* ec) {
+    local_ec = ec;
+}
+
+inline execution_context* get_local_ec() {
+    return local_ec;
+}
+
 class task {
     scheduling_group _sg;
 #ifdef SEASTAR_TASK_BACKTRACE
@@ -38,12 +58,16 @@ class task {
     // run_and_dispose() should be declared final to avoid losing concrete type
     // information via inheritance.
     ~task() = default;
+    execution_context* _ec;
 public:
-    explicit task(scheduling_group sg = current_scheduling_group()) noexcept : _sg(sg) {}
+    explicit task(scheduling_group sg = current_scheduling_group()) : _sg(sg), _ec(get_local_ec()) {}
+    explicit task(execution_context* ec, scheduling_group sg = current_scheduling_group()) : _sg(sg), _ec(ec) {}
     virtual void run_and_dispose() noexcept = 0;
+    virtual void cancel() {}
     /// Returns the next task which is waiting for this task to complete execution, or nullptr.
     virtual task* waiting_task() noexcept = 0;
     scheduling_group group() const { return _sg; }
+    execution_context* ec() const { return _ec; }
     shared_backtrace get_backtrace() const;
 #ifdef SEASTAR_TASK_BACKTRACE
     void make_backtrace() noexcept;
diff --git a/include/seastar/net/api.hh b/include/seastar/net/api.hh
index 6c2048c9..840d0c15 100644
--- a/include/seastar/net/api.hh
+++ b/include/seastar/net/api.hh
@@ -133,6 +133,26 @@ class udp_channel {

 class network_interface_impl;

+/// hiactor hacking
+/// customized load balancing policy
+struct lba_policy {
+    lba_policy() = default;
+    virtual ~lba_policy() = default;
+    virtual unsigned get_cpu(uint32_t addr, uint16_t port) = 0;
+};
+
+class customized_lba {
+    static std::unique_ptr<lba_policy> impl_;
+public:
+    static inline unsigned get_cpu(uint32_t addr, uint16_t port) {
+        return impl_->get_cpu(addr, port);
+    }
+    static inline void set_policy(std::unique_ptr<lba_policy>&& policy) {
+        assert(!impl_ && "Error: policy is already setted.");
+        impl_ = std::move(policy);
+    }
+};
+
 } /* namespace net */

 /// \addtogroup networking-module
@@ -292,6 +312,7 @@ class server_socket {
         port,
         // This algorithm distributes all new connections to listen_options::fixed_cpu shard only.
         fixed,
+        customized, // hiactor hacking
         default_ = connection_distribution
     };
     /// Constructs a \c server_socket not corresponding to a connection
diff --git a/include/seastar/net/posix-stack.hh b/include/seastar/net/posix-stack.hh
index 00fd15ba..5e162850 100644
--- a/include/seastar/net/posix-stack.hh
+++ b/include/seastar/net/posix-stack.hh
@@ -60,6 +60,14 @@ class conntrack {
             _cpu_load[cpu]++;
             return cpu;
         }
+        /// hiactor hacking
+        shard_id customized_cpu(socket_address &sa) {
+            auto cpu = customized_lba::get_cpu(
+                ntoh(sa.as_posix_sockaddr_in().sin_addr.s_addr),
+                ntoh(sa.as_posix_sockaddr_in().sin_port));
+            _cpu_load[cpu]++;
+            return cpu;
+        }
     };

     lw_shared_ptr<load_balancer> _lb;
@@ -102,6 +110,10 @@ class conntrack {
     handle get_handle(shard_id cpu) {
         return handle(_lb->force_cpu(cpu), _lb);
     }
+    /// hiactor hacking
+    handle get_handle(socket_address &sa) {
+        return handle(_lb->customized_cpu(sa), _lb);
+    }
 };

 class posix_data_source_impl final : public data_source_impl, private internal::buffer_allocator {
diff --git a/src/core/reactor.cc b/src/core/reactor.cc
index 22dc21b1..9fd1364b 100644
--- a/src/core/reactor.cc
+++ b/src/core/reactor.cc
@@ -1103,7 +1103,10 @@ void cpu_stall_detector::update_config(cpu_stall_detector_config cfg) {

 void cpu_stall_detector::maybe_report() {
     if (_reported++ < _max_reports_per_minute) {
+        /// hiactor hacking
+        #ifdef HIACTOR_CPU_STALL_REPORT
         generate_trace();
+        #endif
     }
 }
 // We use a tick at every timer firing so we can report suppressed backtraces.
@@ -1154,7 +1157,10 @@ void cpu_stall_detector_posix_timer::arm_timer() {

 void cpu_stall_detector::start_task_run(sched_clock::time_point now) {
     if (now > _rearm_timer_at) {
+        /// hiactor hacking
+        #ifdef HIACTOR_CPU_STALL_REPORT
         report_suppressions(now);
+        #endif
         _report_at = 1;
         _run_started_at = now;
         _rearm_timer_at = now + _threshold * _report_at;
@@ -1201,7 +1207,9 @@ cpu_stall_detector_linux_perf_event::~cpu_stall_detector_linux_perf_event() {
 void
 cpu_stall_detector_linux_perf_event::arm_timer() {
     uint64_t ns = (_threshold * _report_at + _slack) / 1ns;
-    if (_enabled && _current_period == ns) [[likely]] {
+    /// hiactor hackings: fix '-Werror=attributes'
+    if (_enabled && _current_period == ns) {
+//    if (_enabled && _current_period == ns) [[likely]] {
         // Common case - we're re-arming with the same period, the counter
         // is already enabled.
         _fd.ioctl(PERF_EVENT_IOC_RESET, 0);
@@ -3076,7 +3084,7 @@ class poller::registration_task final : public task {
         delete this;
     }
     task* waiting_task() noexcept override { return nullptr; }
-    void cancel() {
+    void cancel() override /* hiactor hacking */ {
         _p = nullptr;
     }
     void moved(poller* p) {
@@ -3422,12 +3430,16 @@ future<size_t> readable_eventfd::wait() {
     });
 }

+/// hiactor hacking
 void schedule(task* t) noexcept {
-    engine().add_task(t);
+    auto* ec = t->ec();
+    (ec == nullptr) ? engine().add_task(t) : ec->add_task(t);
 }

+/// hiactor hacking
 void schedule_urgent(task* t) noexcept {
-    engine().add_urgent_task(t);
+    auto* ec = t->ec();
+    (ec == nullptr) ? engine().add_urgent_task(t) : ec->add_urgent_task(t);
 }

 }
@@ -4244,6 +4256,9 @@ bool smp::pure_poll_queues() {

 __thread reactor* local_engine;

+/// hiactor hacking
+__thread execution_context* local_ec{nullptr};
+
 void report_exception(std::string_view message, std::exception_ptr eptr) noexcept {
     seastar_logger.error("{}: {}", message, eptr);
 }
diff --git a/src/http/httpd.cc b/src/http/httpd.cc
index 774bb84f..1ea29a75 100644
--- a/src/http/httpd.cc
+++ b/src/http/httpd.cc
@@ -167,6 +167,7 @@ bool connection::url_decode(const std::string_view& in, sstring& out) {
 void connection::on_new_connection() {
     ++_server._total_connections;
     ++_server._current_connections;
+    _fd.set_nodelay(true);  /// hiactor hacking
     _server._connections.push_back(*this);
 }

diff --git a/src/net/posix-stack.cc b/src/net/posix-stack.cc
index c1d818b1..6b98ba65 100644
--- a/src/net/posix-stack.cc
+++ b/src/net/posix-stack.cc
@@ -74,6 +74,9 @@ namespace net {

 using namespace seastar;

+/// hiactor hacking
+std::unique_ptr<lba_policy> customized_lba::impl_{nullptr};
+
 class posix_connected_socket_operations {
 public:
     virtual ~posix_connected_socket_operations() = default;
@@ -469,6 +472,9 @@ posix_server_socket_impl::accept() {
                 return _conntrack.get_handle(ntoh(sa.as_posix_sockaddr_in().sin_port) % smp::count);
             case server_socket::load_balancing_algorithm::fixed:
                 return _conntrack.get_handle(_fixed_cpu);
+            /// hiactor hacking
+            case server_socket::load_balancing_algorithm::customized:
+                return _conntrack.get_handle(sa);
             default: abort();
             }
         } ();
--
2.34.1

